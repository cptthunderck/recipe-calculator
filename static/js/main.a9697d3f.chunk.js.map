{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","console","log","hashState","state","text","document","location","hash","substr","decodeURIComponent","JSON","parse","e","error","tinyurl","uid","volume","volumeUnits","massUnits","liquids","solids","stateFromLocationHash","solidNameRef","useRef","solidDisplacementRef","useState","setVolume","setVolumeUnits","setMassUnits","setUid","setLiquids","setSolids","knownSolids","setKnownSolids","encodeURIComponent","stringify","useEffect","controller","AbortController","a","fetch","signal","knownSolidsReq","json","prevValue","Object","keys","length","get","catch","err","abort","onSolidNameChange","value","prevState","name","onSolidDisplacementChange","displacement","liquidsList","entries","map","key","onClick","removeLiquid","htmlFor","onChange","onLiquidNameChange","target","defaultValue","id","type","amount","onLiquidAmountChange","valueAsNumber","knownSolidsOptions","solidsList","removeSolid","style","display","current","onKnownSolidChange","ref","onSolidAmountChange","className","NaN","list","values","Number","isFinite","liquidsBalance","filter","x","liquidsPercentage","solidsDisplacement","reduce","p","c","liquidsPercentageDisplacement","remainder","forEach","push","toPrecision","recipeList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a9697d3f.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\n\ntype LiquidList = {\n    [key: string]: {\n        name: string,\n        amount: number\n    }\n}\n\ntype SolidList = {\n    [key: string]: {\n        name: string,\n        displacement: number,\n        amount: number\n    }\n}\n\nfunction stateFromLocationHash() {\n    let state = null\n    let text = document.location.hash.substr(1)\n    let hash = decodeURIComponent(text)\n\n    try {\n        state = JSON.parse(hash)\n    } catch(e) {\n        console.error(e)\n    }\n    \n    if(state === null) {\n        state = {\n            tinyurl: text,\n            uid: 0,\n            volume: 0,\n            volumeUnits: \"mL\",\n            massUnits: \"g\",\n            liquids: {},\n            solids: {}\n        }\n    }\n\n    console.log(state)\n\n    return state\n}\n\nfunction App() {\n    console.log(\"App()\")\n\n    let hashState = stateFromLocationHash()\n\n    let solidNameRef = useRef<HTMLInputElement>(null)\n    let solidDisplacementRef = useRef<HTMLInputElement>(null)\n\n    let [volume, setVolume] = useState(hashState.volume as number)\n    let [volumeUnits, setVolumeUnits] = useState(hashState.volumeUnits as string)\n    let [massUnits, setMassUnits] = useState(hashState.massUnits as string)\n    let [uid, setUid] = useState(hashState.uid as number)\n    let [liquids, setLiquids] = useState(hashState.liquids as LiquidList)\n    let [solids, setSolids] = useState(hashState.solids as SolidList)\n    let [knownSolids, setKnownSolids] = useState({} as {[key: string]: number})\n    let [tinyurl] = useState(hashState.tinyurl as string)\n\n    document.location.hash = encodeURIComponent(JSON.stringify({tinyurl, uid, volume, volumeUnits, massUnits, liquids, solids}))\n\n    useEffect(() => {\n        let controller = new AbortController()\n\n        async function get() {\n            let knownSolidsReq = await fetch(`https://tinyurl.com/${tinyurl}`, {signal: controller.signal})\n            let json = await knownSolidsReq.json()\n            setKnownSolids(prevValue => json)\n        }\n\n        if(Object.keys(knownSolids).length === 0) {\n            get().catch((err) => {\n                console.error(err)\n            })\n        }\n\n        return () => {\n            controller.abort()\n        }\n    })\n\n    let addLiquid = () => {\n        setUid(uid + 1)\n\n        liquids[uid] = {\n            name: \"\",\n            amount: NaN\n        }\n\n        setLiquids(liquids)\n    }\n\n    let removeLiquid = (uid: string) => {\n        delete liquids[uid]\n        setLiquids({...liquids})\n    }\n\n    let onLiquidNameChange = (uid: string, value: string) => {\n        setLiquids({\n            ...liquids,\n            [uid]: {\n                ...liquids[uid],\n                name: value\n            }\n        })\n    }\n\n    let onLiquidAmountChange = (uid: string, value: number) => {\n        setLiquids({\n            ...liquids,\n            [uid]: {\n                ...liquids[uid],\n                amount: value\n            }\n        })\n    }\n\n    let addSolid = () => {\n        setUid(uid + 1)\n\n        solids[uid] = {\n            name: \"\",\n            displacement: NaN,\n            amount: NaN\n        }\n\n        setSolids(solids)\n    }\n\n    let removeSolid = (uid: string) => {\n        delete solids[uid]\n        setSolids({...solids})\n    }\n\n    let onSolidNameChange = (uid: string, value: string) => {\n        setSolids(prevState =>  ({\n            ...prevState,\n            [uid]: {\n                ...prevState[uid],\n                name: value\n            }\n        }))\n    }\n\n    let onSolidDisplacementChange = (uid: string, value: number) => {\n        setSolids(prevState => ({\n            ...prevState,\n            [uid]: {\n                ...prevState[uid],\n                displacement: value\n            }\n        }))\n    }\n\n    let onSolidAmountChange = (uid: string, value: number) => {\n        setSolids({\n            ...solids,\n            [uid]: {\n                ...solids[uid],\n                amount: value\n            }\n        })\n    }\n\n    let liquidsList = Object.entries(liquids).map(([key, value]) =>\n        <li key={key}>\n            <button onClick={() => removeLiquid(key)}>Remove</button>\n            <br/>\n            <label htmlFor={`name_${key}`}>Name</label>\n            <br/>\n            <input onChange={(e) => onLiquidNameChange(key, e.target.value)} defaultValue={value.name} id={`name_${key}`} type=\"text\"/>\n            <br/>\n\n            <label htmlFor={`amount_${key}`}>Volume (%)</label>\n            <br/>\n            <input onChange={(e) => onLiquidAmountChange(key, e.target.valueAsNumber)} defaultValue={value.amount || \"\"} id={`amount_${key}`} type=\"number\"/>\n            <br/>\n        </li>\n    )\n\n    let knownSolidsOptions = Object.entries(knownSolids).map(([key, value]) =>\n        <option key={key} value={key}>{key}</option>\n    )\n\n    let onKnownSolidChange = (uid: string, value: string) => {\n        solidNameRef.current!.value = value\n        solidDisplacementRef.current!.valueAsNumber = knownSolids[value]\n        onSolidNameChange(uid, value)\n        onSolidDisplacementChange(uid, knownSolids[value])\n    }\n\n    let solidsList = Object.entries(solids).map(([key, value]) =>\n        <li key={key}>\n            <button onClick={() => removeSolid(key)}>Remove</button>\n            <br/>\n\n            <label htmlFor={`name_${key}`}>Name</label>\n            <br/>\n            <span style={{display: (Object.keys(knownSolids).length !== null) ? \"default\" : \"none\"}}>\n            <select onChange={(e) => onKnownSolidChange(key, e.target.value)} value={value.name}>{knownSolidsOptions}</select>\n            <br/>\n            </span>\n            <input onChange={(e) => onSolidNameChange(key, e.target.value)} value={value.name} id={`name_${key}`} type=\"text\" ref={solidNameRef}/>\n            <br/>\n\n            <label htmlFor={`displacement_${key}`}>Displacement ({volumeUnits}/{massUnits})</label>\n            <br/>\n            <input onChange={(e) => onSolidDisplacementChange(key, e.target.valueAsNumber)} defaultValue={value.displacement || \"\"} id={`displacement_${key}`} type=\"number\" ref={solidDisplacementRef}/>\n            <br/>\n\n            <label htmlFor={`amount_${key}`}>Concentration ({massUnits}/{volumeUnits})</label>\n            <br/>\n            <input onChange={(e) => onSolidAmountChange(key, e.target.valueAsNumber)} defaultValue={value.amount || \"\"} id={`amount_${key}`} type=\"number\"/>\n            <br/>\n        </li>\n    )\n\n    let recipeList = () => {\n        let list: any = []\n        let liquidsList = Object.values(liquids)\n        let solidsList = Object.values(solids)\n\n        if(!Number.isFinite(volume) || liquidsList.length === 0 || solidsList.length === 0) {\n            return list\n        }\n\n        let liquidsBalance = liquidsList.filter(x => !Number.isFinite(x.amount))\n        let liquidsPercentage = liquidsList.filter(x => Number.isFinite(x.amount))\n        let solidsDisplacement = solidsList.map(x => x.amount * volume * x.displacement).reduce((p, c) => p + c, 0)\n        let liquidsPercentageDisplacement = liquidsPercentage.map(x => (x.amount / 100) * volume).reduce((p, c) => p + c, 0)\n        let remainder = volume - (solidsDisplacement + liquidsPercentageDisplacement)\n\n        let id = 0\n\n        liquidsBalance.forEach(x => list.push(<li key={id++}>{x.name}: {(remainder / liquidsBalance.length).toPrecision(4)} {volumeUnits}</li>))\n        liquidsPercentage.forEach(x => list.push(<li key={id++}>{x.name}: {(volume * (x.amount / 100)).toPrecision(4)} {volumeUnits}</li>))\n        solidsList.forEach(x => list.push(<li key={id++}>{x.name}: {(volume * x.amount).toPrecision(4)} {massUnits}</li>))\n\n        return list\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>Recipe Calculator</h1>\n\n            <label htmlFor=\"volumeUnits\">Volume Units</label><br/>\n            <input onChange={(e) => setVolumeUnits(e.target.value)} defaultValue={volumeUnits} id=\"volumeUnits\" type=\"text\"/><br/>\n\n            <label htmlFor=\"massUnits\">Mass Units</label><br/>\n            <input onChange={(e) => setMassUnits(e.target.value)} defaultValue={massUnits} id=\"massUnits\" type=\"text\"/><br/>\n\n            <label htmlFor=\"total\">Total Volume ({volumeUnits})</label><br/>\n            <input onChange={(e) => setVolume(e.target.valueAsNumber)} defaultValue={volume || \"\"} id=\"total\" type=\"number\"/><br/>\n\n            <h2>Liquids</h2>\n            <h3>Liquids without amount specified will be used to fill remainder of total volume</h3>\n            <button onClick={addLiquid}>Add</button>\n            <ul>{liquidsList}</ul>\n\n            <h2>Solids</h2>\n            <button onClick={addSolid}>Add</button>\n            <ul>{solidsList}</ul>\n\n            <h2>Recipe</h2>\n            <ul>{recipeList()}</ul>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}