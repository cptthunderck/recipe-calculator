{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","hashState","state","hash","decodeURIComponent","document","location","substr","JSON","parse","e","console","error","uid","volume","volumeUnits","massUnits","liquids","solids","stateFromLocationHash","useState","setVolume","setVolumeUnits","setMassUnits","setUid","setLiquids","setSolids","encodeURIComponent","stringify","liquidsList","Object","entries","map","key","value","onClick","removeLiquid","htmlFor","onChange","name","onLiquidNameChange","target","defaultValue","id","type","amount","onLiquidAmountChange","valueAsNumber","solidsList","removeSolid","onSolidNameChange","displacement","onSolidDisplacementChange","onSolidAmountChange","className","NaN","list","values","Number","isFinite","length","liquidsBalance","filter","x","liquidsPercentage","solidsDisplacement","reduce","p","c","liquidsPercentageDisplacement","remainder","forEach","push","toPrecision","recipeList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1b951405.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\ntype LiquidList = {\n    [key: string]: {\n        name: string,\n        amount: number\n    }\n}\n\ntype SolidList = {\n    [key: string]: {\n        name: string,\n        displacement: number,\n        amount: number\n    }\n}\n\nfunction stateFromLocationHash() {\n    let state = null\n    let hash = decodeURIComponent(document.location.hash.substr(1))\n\n    try {\n        state = JSON.parse(hash)\n    } catch(e) {\n        console.error(e)\n    }\n    \n    if(state === null) {\n        state = {\n            uid: 0,\n            volume: 0,\n            volumeUnits: \"mL\",\n            massUnits: \"g\",\n            liquids: {},\n            solids: {}\n        }\n    }\n\n    return state\n}\n\nfunction App() {\n    let hashState = stateFromLocationHash()\n\n    let [volume, setVolume] = useState(hashState.volume as number)\n    let [volumeUnits, setVolumeUnits] = useState(hashState.volumeUnits as string)\n    let [massUnits, setMassUnits] = useState(hashState.massUnits as string)\n    let [uid, setUid] = useState(hashState.uid as number)\n    let [liquids, setLiquids] = useState(hashState.liquids as LiquidList)\n    let [solids, setSolids] = useState(hashState.solids as SolidList)\n\n    document.location.hash = encodeURIComponent(JSON.stringify({uid, volume, volumeUnits, massUnits, liquids, solids}))\n\n    let addLiquid = () => {\n        setUid(uid + 1)\n\n        liquids[uid] = {\n            name: \"\",\n            amount: NaN\n        }\n\n        setLiquids(liquids)\n    }\n\n    let removeLiquid = (uid: string) => {\n        delete liquids[uid]\n        setLiquids({...liquids})\n    }\n\n    let onLiquidNameChange = (uid: string, value: string) => {\n        setLiquids({\n            ...liquids,\n            [uid]: {\n                ...liquids[uid],\n                name: value\n            }\n        })\n    }\n\n    let onLiquidAmountChange = (uid: string, value: number) => {\n        setLiquids({\n            ...liquids,\n            [uid]: {\n                ...liquids[uid],\n                amount: value\n            }\n        })\n    }\n\n    let addSolid = () => {\n        setUid(uid + 1)\n\n        solids[uid] = {\n            name: \"\",\n            displacement: NaN,\n            amount: NaN\n        }\n\n        setSolids(solids)\n    }\n\n    let removeSolid = (uid: string) => {\n        delete solids[uid]\n        setSolids({...solids})\n    }\n\n    let onSolidNameChange = (uid: string, value: string) => {\n        setSolids({\n            ...solids,\n            [uid]: {\n                ...solids[uid],\n                name: value\n            }\n        })\n    }\n\n    let onSolidDisplacementChange = (uid: string, value: number) => {\n        setSolids({\n            ...solids,\n            [uid]: {\n                ...solids[uid],\n                displacement: value\n            }\n        })\n    }\n\n    let onSolidAmountChange = (uid: string, value: number) => {\n        setSolids({\n            ...solids,\n            [uid]: {\n                ...solids[uid],\n                amount: value\n            }\n        })\n    }\n\n    let liquidsList = Object.entries(liquids).map(([key, value]) =>\n        <li key={key}>\n            <button onClick={() => removeLiquid(key)}>Remove</button>\n            <br/>\n            <label htmlFor={`name_${key}`}>Name</label>\n            <br/>\n            <input onChange={(e) => onLiquidNameChange(key, e.target.value)} defaultValue={value.name} id={`name_${key}`} type=\"text\"/>\n            <br/>\n\n            <label htmlFor={`amount_${key}`}>Volume (%)</label>\n            <br/>\n            <input onChange={(e) => onLiquidAmountChange(key, e.target.valueAsNumber)} defaultValue={value.amount || \"\"} id={`amount_${key}`} type=\"number\"/>\n            <br/>\n        </li>\n    )\n\n    let solidsList = Object.entries(solids).map(([key, value]) =>\n        <li key={key}>\n            <button onClick={() => removeSolid(key)}>Remove</button>\n            <br/>\n            <label htmlFor={`name_${key}`}>Name</label>\n            <br/>\n            <input onChange={(e) => onSolidNameChange(key, e.target.value)} defaultValue={value.name} id={`name_${key}`} type=\"text\"/>\n            <br/>\n\n            <label htmlFor={`displacement_${key}`}>Displacement ({volumeUnits}/{massUnits})</label>\n            <br/>\n            <input onChange={(e) => onSolidDisplacementChange(key, e.target.valueAsNumber)} defaultValue={value.displacement || \"\"} id={`displacement_${key}`} type=\"number\"/>\n            <br/>\n\n            <label htmlFor={`amount_${key}`}>Concentration ({massUnits}/{volumeUnits})</label>\n            <br/>\n            <input onChange={(e) => onSolidAmountChange(key, e.target.valueAsNumber)} defaultValue={value.amount || \"\"} id={`amount_${key}`} type=\"number\"/>\n            <br/>\n        </li>\n    )\n\n    let recipeList = () => {\n        let list: any = []\n        let liquidsList = Object.values(liquids)\n        let solidsList = Object.values(solids)\n\n        if(!Number.isFinite(volume) || liquidsList.length === 0 || solidsList.length === 0) {\n            return list\n        }\n\n        let liquidsBalance = liquidsList.filter(x => !Number.isFinite(x.amount))\n        let liquidsPercentage = liquidsList.filter(x => Number.isFinite(x.amount))\n        let solidsDisplacement = solidsList.map(x => x.amount * volume * x.displacement).reduce((p, c) => p + c, 0)\n        let liquidsPercentageDisplacement = liquidsPercentage.map(x => (x.amount / 100) * volume).reduce((p, c) => p + c, 0)\n        let remainder = volume - (solidsDisplacement + liquidsPercentageDisplacement)\n\n        let id = 0\n\n        liquidsBalance.forEach(x => list.push(<li key={id++}>{x.name}: {(remainder / liquidsBalance.length).toPrecision(4)} {volumeUnits}</li>))\n        liquidsPercentage.forEach(x => list.push(<li key={id++}>{x.name}: {(volume * (x.amount / 100)).toPrecision(4)} {volumeUnits}</li>))\n        solidsList.forEach(x => list.push(<li key={id++}>{x.name}: {(volume * x.amount).toPrecision(4)} {massUnits}</li>))\n\n        return list\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>Recipe Calculator</h1>\n\n            <label htmlFor=\"volumeUnits\">Volume Units</label><br/>\n            <input onChange={(e) => setVolumeUnits(e.target.value)} defaultValue={volumeUnits} id=\"volumeUnits\" type=\"text\"/><br/>\n\n            <label htmlFor=\"massUnits\">Mass Units</label><br/>\n            <input onChange={(e) => setMassUnits(e.target.value)} defaultValue={massUnits} id=\"massUnits\" type=\"text\"/><br/>\n\n            <label htmlFor=\"total\">Total Volume ({volumeUnits})</label><br/>\n            <input onChange={(e) => setVolume(e.target.valueAsNumber)} defaultValue={volume || \"\"} id=\"total\" type=\"number\"/><br/>\n\n            <h2>Liquids</h2>\n            <h3>Liquids without amount specified will be used to fill remainder of total volume</h3>\n            <button onClick={addLiquid}>Add</button>\n            <ul>{liquidsList}</ul>\n\n            <h2>Solids</h2>\n            <button onClick={addSolid}>Add</button>\n            <ul>{solidsList}</ul>\n\n            <h2>Recipe</h2>\n            <ul>{recipeList()}</ul>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}