{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","hashState","state","hash","decodeURIComponent","document","location","substr","JSON","parse","e","console","error","uid","volume","volumeUnits","massUnits","liquids","solids","knownSolids","stateFromLocationHash","solidNameRef","useRef","solidDisplacementRef","useState","setVolume","setVolumeUnits","setMassUnits","setUid","setLiquids","setSolids","encodeURIComponent","stringify","onSolidNameChange","value","prevState","name","onSolidDisplacementChange","displacement","liquidsList","Object","entries","map","key","onClick","removeLiquid","htmlFor","onChange","onLiquidNameChange","target","defaultValue","id","type","amount","onLiquidAmountChange","valueAsNumber","knownSolidsOptions","solidsList","removeSolid","style","display","length","current","onKnownSolidChange","ref","onSolidAmountChange","className","NaN","list","values","Number","isFinite","liquidsBalance","filter","x","liquidsPercentage","solidsDisplacement","reduce","p","c","liquidsPercentageDisplacement","remainder","forEach","push","toPrecision","recipeList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8PAwPeA,MA5Mf,WACI,IAAIC,EA1BR,WACI,IAAIC,EAAQ,KACRC,EAAOC,mBAAmBC,SAASC,SAASH,KAAKI,OAAO,IAE5D,IACIL,EAAQM,KAAKC,MAAMN,GACrB,MAAMO,GACJC,QAAQC,MAAMF,GAelB,OAZa,OAAVR,IACCA,EAAQ,CACJW,IAAK,EACLC,OAAQ,EACRC,YAAa,KACbC,UAAW,IACXC,QAAS,GACTC,OAAQ,GACRC,YAAa,KAIdjB,EAISkB,GAEZC,EAAeC,iBAAyB,MACxCC,EAAuBD,iBAAyB,MAEpD,EAA0BE,mBAASvB,EAAUa,QAA7C,mBAAKA,EAAL,KAAaW,EAAb,KACA,EAAoCD,mBAASvB,EAAUc,aAAvD,mBAAKA,EAAL,KAAkBW,EAAlB,KACA,EAAgCF,mBAASvB,EAAUe,WAAnD,mBAAKA,EAAL,KAAgBW,EAAhB,KACA,EAAoBH,mBAASvB,EAAUY,KAAvC,mBAAKA,EAAL,KAAUe,EAAV,KACA,EAA4BJ,mBAASvB,EAAUgB,SAA/C,mBAAKA,EAAL,KAAcY,EAAd,KACA,EAA0BL,mBAASvB,EAAUiB,QAA7C,mBAAKA,EAAL,KAAaY,EAAb,KACA,EAAoBN,mBAASvB,EAAUkB,aAAlCA,EAAL,oBAEAd,SAASC,SAASH,KAAO4B,mBAAmBvB,KAAKwB,UAAU,CAACnB,MAAKC,SAAQC,cAAaC,YAAWC,UAASC,SAAQC,YAAalB,EAAUkB,eAEzI,IAqDIc,EAAoB,SAACpB,EAAaqB,GAClCJ,GAAU,SAAAK,GAAS,kCACZA,GADY,kBAEdtB,EAFc,2BAGRsB,EAAUtB,IAHF,IAIXuB,KAAMF,UAKdG,EAA4B,SAACxB,EAAaqB,GAC1CJ,GAAU,SAAAK,GAAS,kCACZA,GADY,kBAEdtB,EAFc,2BAGRsB,EAAUtB,IAHF,IAIXyB,aAAcJ,UAetBK,EAAcC,OAAOC,QAAQxB,GAASyB,KAAI,mCAAEC,EAAF,KAAOT,EAAP,YAC1C,+BACI,wBAAQU,QAAS,kBA1EN,SAAC/B,UACTI,EAAQJ,GACfgB,EAAW,eAAIZ,IAwEY4B,CAAaF,IAApC,oBACA,uBACA,uBAAOG,QAAO,eAAUH,GAAxB,kBACA,uBACA,uBAAOI,SAAU,SAACrC,GAAD,OAzEA,SAACG,EAAaqB,GACnCL,EAAW,2BACJZ,GADG,kBAELJ,EAFK,YAAC,eAGAI,EAAQJ,IAHT,IAIFuB,KAAMF,OAoEcc,CAAmBL,EAAKjC,EAAEuC,OAAOf,QAAQgB,aAAchB,EAAME,KAAMe,GAAE,eAAUR,GAAOS,KAAK,SACnH,uBAEA,uBAAON,QAAO,iBAAYH,GAA1B,wBACA,uBACA,uBAAOI,SAAU,SAACrC,GAAD,OApEE,SAACG,EAAaqB,GACrCL,EAAW,2BACJZ,GADG,kBAELJ,EAFK,YAAC,eAGAI,EAAQJ,IAHT,IAIFwC,OAAQnB,OA+DYoB,CAAqBX,EAAKjC,EAAEuC,OAAOM,gBAAgBL,aAAchB,EAAMmB,QAAU,GAAIF,GAAE,iBAAYR,GAAOS,KAAK,WACvI,yBAXKT,MAeTa,EAAqBhB,OAAOC,QAAQtB,GAAauB,KAAI,mCAAEC,EAAF,iBACrD,wBAAkBT,MAAOS,EAAzB,SAA+BA,GAAlBA,MAUbc,EAAajB,OAAOC,QAAQvB,GAAQwB,KAAI,mCAAEC,EAAF,KAAOT,EAAP,YACxC,+BACI,wBAAQU,QAAS,kBAhEP,SAAC/B,UACRK,EAAOL,GACdiB,EAAU,eAAIZ,IA8DawC,CAAYf,IAAnC,oBACA,uBAEA,uBAAOG,QAAO,eAAUH,GAAxB,kBACA,uBACA,uBAAMgB,MAAO,CAACC,QAAUJ,EAAmBK,OAAS,EAAK,UAAY,QAArE,UACA,wBAAQd,SAAU,SAACrC,GAAD,OAfD,SAACG,EAAaqB,GACnCb,EAAayC,QAAS5B,MAAQA,EAC9BX,EAAqBuC,QAASP,cAAgBpC,EAAYe,GAC1DD,EAAkBpB,EAAKqB,GACvBG,EAA0BxB,EAAKM,EAAYe,IAWd6B,CAAmBpB,EAAKjC,EAAEuC,OAAOf,QAAQgB,aAAchB,EAAME,KAAtF,SAA6FoB,IAC7F,0BAEA,uBAAOT,SAAU,SAACrC,GAAD,OAAOuB,EAAkBU,EAAKjC,EAAEuC,OAAOf,QAAQgB,aAAchB,EAAME,KAAMe,GAAE,eAAUR,GAAOS,KAAK,OAAOY,IAAK3C,IAC9H,uBAEA,wBAAOyB,QAAO,uBAAkBH,GAAhC,2BAAsD5B,EAAtD,IAAoEC,EAApE,OACA,uBACA,uBAAO+B,SAAU,SAACrC,GAAD,OAAO2B,EAA0BM,EAAKjC,EAAEuC,OAAOM,gBAAgBL,aAAchB,EAAMI,cAAgB,GAAIa,GAAE,uBAAkBR,GAAOS,KAAK,SAASY,IAAKzC,IACtK,uBAEA,wBAAOuB,QAAO,iBAAYH,GAA1B,4BAAiD3B,EAAjD,IAA6DD,EAA7D,OACA,uBACA,uBAAOgC,SAAU,SAACrC,GAAD,OA1DC,SAACG,EAAaqB,GACpCJ,EAAU,2BACHZ,GADE,kBAEJL,EAFI,YAAC,eAGCK,EAAOL,IAHT,IAIDwC,OAAQnB,OAqDY+B,CAAoBtB,EAAKjC,EAAEuC,OAAOM,gBAAgBL,aAAchB,EAAMmB,QAAU,GAAIF,GAAE,iBAAYR,GAAOS,KAAK,WACtI,yBArBKT,MAiDb,OACI,sBAAKuB,UAAU,MAAf,UACI,mDAEA,uBAAOpB,QAAQ,cAAf,0BAAiD,uBACjD,uBAAOC,SAAU,SAACrC,GAAD,OAAOgB,EAAehB,EAAEuC,OAAOf,QAAQgB,aAAcnC,EAAaoC,GAAG,cAAcC,KAAK,SAAQ,uBAEjH,uBAAON,QAAQ,YAAf,wBAA6C,uBAC7C,uBAAOC,SAAU,SAACrC,GAAD,OAAOiB,EAAajB,EAAEuC,OAAOf,QAAQgB,aAAclC,EAAWmC,GAAG,YAAYC,KAAK,SAAQ,uBAE3G,wBAAON,QAAQ,QAAf,2BAAsC/B,EAAtC,OAA2D,uBAC3D,uBAAOgC,SAAU,SAACrC,GAAD,OAAOe,EAAUf,EAAEuC,OAAOM,gBAAgBL,aAAcpC,GAAU,GAAIqC,GAAG,QAAQC,KAAK,WAAU,uBAEjH,yCACA,iHACA,wBAAQR,QA/KA,WACZhB,EAAOf,EAAM,GAEbI,EAAQJ,GAAO,CACXuB,KAAM,GACNiB,OAAQc,KAGZtC,EAAWZ,IAuKP,iBACA,6BAAKsB,IAEL,wCACA,wBAAQK,QA/ID,WACXhB,EAAOf,EAAM,GAEbK,EAAOL,GAAO,CACVuB,KAAM,GACNE,aAAc6B,IACdd,OAAQc,KAGZrC,EAAUZ,IAsIN,iBACA,6BAAKuC,IAEL,wCACA,6BA/CS,WACb,IAAIW,EAAY,GACZ7B,EAAcC,OAAO6B,OAAOpD,GAC5BwC,EAAajB,OAAO6B,OAAOnD,GAE/B,IAAIoD,OAAOC,SAASzD,IAAkC,IAAvByB,EAAYsB,QAAsC,IAAtBJ,EAAWI,OAClE,OAAOO,EAGX,IAAII,EAAiBjC,EAAYkC,QAAO,SAAAC,GAAC,OAAKJ,OAAOC,SAASG,EAAErB,WAC5DsB,EAAoBpC,EAAYkC,QAAO,SAAAC,GAAC,OAAIJ,OAAOC,SAASG,EAAErB,WAC9DuB,EAAqBnB,EAAWf,KAAI,SAAAgC,GAAC,OAAIA,EAAErB,OAASvC,EAAS4D,EAAEpC,gBAAcuC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GACrGC,EAAgCL,EAAkBjC,KAAI,SAAAgC,GAAC,OAAKA,EAAErB,OAAS,IAAOvC,KAAQ+D,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAC9GE,EAAYnE,GAAU8D,EAAqBI,GAE3C7B,EAAK,EAMT,OAJAqB,EAAeU,SAAQ,SAAAR,GAAC,OAAIN,EAAKe,KAAK,+BAAgBT,EAAEtC,KAAlB,MAA2B6C,EAAYT,EAAeX,QAAQuB,YAAY,GAA1E,IAA+ErE,IAAtEoC,SAC/CwB,EAAkBO,SAAQ,SAAAR,GAAC,OAAIN,EAAKe,KAAK,+BAAgBT,EAAEtC,KAAlB,MAA2BtB,GAAU4D,EAAErB,OAAS,MAAM+B,YAAY,GAAlE,IAAuErE,IAA9DoC,SAClDM,EAAWyB,SAAQ,SAAAR,GAAC,OAAIN,EAAKe,KAAK,+BAAgBT,EAAEtC,KAAlB,MAA2BtB,EAAS4D,EAAErB,QAAQ+B,YAAY,GAA1D,IAA+DpE,IAAtDmC,SAEpCiB,EA0BEiB,SCrOFC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5F,SAAS6F,eAAe,SAM1BZ,M","file":"static/js/main.191a8e08.chunk.js","sourcesContent":["import { RecordWithTtl } from 'dns';\nimport React, { useRef, useState } from 'react';\nimport './App.css';\n\ntype LiquidList = {\n    [key: string]: {\n        name: string,\n        amount: number\n    }\n}\n\ntype SolidList = {\n    [key: string]: {\n        name: string,\n        displacement: number,\n        amount: number\n    }\n}\n\nfunction stateFromLocationHash() {\n    let state = null\n    let hash = decodeURIComponent(document.location.hash.substr(1))\n\n    try {\n        state = JSON.parse(hash)\n    } catch(e) {\n        console.error(e)\n    }\n    \n    if(state === null) {\n        state = {\n            uid: 0,\n            volume: 0,\n            volumeUnits: \"mL\",\n            massUnits: \"g\",\n            liquids: {},\n            solids: {},\n            knownSolids: {}\n        }\n    }\n\n    return state\n}\n\nfunction App() {\n    let hashState = stateFromLocationHash()\n\n    let solidNameRef = useRef<HTMLInputElement>(null)\n    let solidDisplacementRef = useRef<HTMLInputElement>(null)\n\n    let [volume, setVolume] = useState(hashState.volume as number)\n    let [volumeUnits, setVolumeUnits] = useState(hashState.volumeUnits as string)\n    let [massUnits, setMassUnits] = useState(hashState.massUnits as string)\n    let [uid, setUid] = useState(hashState.uid as number)\n    let [liquids, setLiquids] = useState(hashState.liquids as LiquidList)\n    let [solids, setSolids] = useState(hashState.solids as SolidList)\n    let [knownSolids] = useState(hashState.knownSolids as {[key: string]: number})\n\n    document.location.hash = encodeURIComponent(JSON.stringify({uid, volume, volumeUnits, massUnits, liquids, solids, knownSolids: hashState.knownSolids}))\n\n    let addLiquid = () => {\n        setUid(uid + 1)\n\n        liquids[uid] = {\n            name: \"\",\n            amount: NaN\n        }\n\n        setLiquids(liquids)\n    }\n\n    let removeLiquid = (uid: string) => {\n        delete liquids[uid]\n        setLiquids({...liquids})\n    }\n\n    let onLiquidNameChange = (uid: string, value: string) => {\n        setLiquids({\n            ...liquids,\n            [uid]: {\n                ...liquids[uid],\n                name: value\n            }\n        })\n    }\n\n    let onLiquidAmountChange = (uid: string, value: number) => {\n        setLiquids({\n            ...liquids,\n            [uid]: {\n                ...liquids[uid],\n                amount: value\n            }\n        })\n    }\n\n    let addSolid = () => {\n        setUid(uid + 1)\n\n        solids[uid] = {\n            name: \"\",\n            displacement: NaN,\n            amount: NaN\n        }\n\n        setSolids(solids)\n    }\n\n    let removeSolid = (uid: string) => {\n        delete solids[uid]\n        setSolids({...solids})\n    }\n\n    let onSolidNameChange = (uid: string, value: string) => {\n        setSolids(prevState =>  ({\n            ...prevState,\n            [uid]: {\n                ...prevState[uid],\n                name: value\n            }\n        }))\n    }\n\n    let onSolidDisplacementChange = (uid: string, value: number) => {\n        setSolids(prevState => ({\n            ...prevState,\n            [uid]: {\n                ...prevState[uid],\n                displacement: value\n            }\n        }))\n    }\n\n    let onSolidAmountChange = (uid: string, value: number) => {\n        setSolids({\n            ...solids,\n            [uid]: {\n                ...solids[uid],\n                amount: value\n            }\n        })\n    }\n\n    let liquidsList = Object.entries(liquids).map(([key, value]) =>\n        <li key={key}>\n            <button onClick={() => removeLiquid(key)}>Remove</button>\n            <br/>\n            <label htmlFor={`name_${key}`}>Name</label>\n            <br/>\n            <input onChange={(e) => onLiquidNameChange(key, e.target.value)} defaultValue={value.name} id={`name_${key}`} type=\"text\"/>\n            <br/>\n\n            <label htmlFor={`amount_${key}`}>Volume (%)</label>\n            <br/>\n            <input onChange={(e) => onLiquidAmountChange(key, e.target.valueAsNumber)} defaultValue={value.amount || \"\"} id={`amount_${key}`} type=\"number\"/>\n            <br/>\n        </li>\n    )\n\n    let knownSolidsOptions = Object.entries(knownSolids).map(([key, value]) =>\n        <option key={key} value={key}>{key}</option>\n    )\n\n    let onKnownSolidChange = (uid: string, value: string) => {\n        solidNameRef.current!.value = value\n        solidDisplacementRef.current!.valueAsNumber = knownSolids[value]\n        onSolidNameChange(uid, value)\n        onSolidDisplacementChange(uid, knownSolids[value])\n    }\n\n    let solidsList = Object.entries(solids).map(([key, value]) =>\n        <li key={key}>\n            <button onClick={() => removeSolid(key)}>Remove</button>\n            <br/>\n\n            <label htmlFor={`name_${key}`}>Name</label>\n            <br/>\n            <span style={{display: (knownSolidsOptions.length > 0) ? \"default\" : \"none\"}}>\n            <select onChange={(e) => onKnownSolidChange(key, e.target.value)} defaultValue={value.name}>{knownSolidsOptions}</select>\n            <br/>\n            </span>\n            <input onChange={(e) => onSolidNameChange(key, e.target.value)} defaultValue={value.name} id={`name_${key}`} type=\"text\" ref={solidNameRef}/>\n            <br/>\n\n            <label htmlFor={`displacement_${key}`}>Displacement ({volumeUnits}/{massUnits})</label>\n            <br/>\n            <input onChange={(e) => onSolidDisplacementChange(key, e.target.valueAsNumber)} defaultValue={value.displacement || \"\"} id={`displacement_${key}`} type=\"number\" ref={solidDisplacementRef}/>\n            <br/>\n\n            <label htmlFor={`amount_${key}`}>Concentration ({massUnits}/{volumeUnits})</label>\n            <br/>\n            <input onChange={(e) => onSolidAmountChange(key, e.target.valueAsNumber)} defaultValue={value.amount || \"\"} id={`amount_${key}`} type=\"number\"/>\n            <br/>\n        </li>\n    )\n\n    let recipeList = () => {\n        let list: any = []\n        let liquidsList = Object.values(liquids)\n        let solidsList = Object.values(solids)\n\n        if(!Number.isFinite(volume) || liquidsList.length === 0 || solidsList.length === 0) {\n            return list\n        }\n\n        let liquidsBalance = liquidsList.filter(x => !Number.isFinite(x.amount))\n        let liquidsPercentage = liquidsList.filter(x => Number.isFinite(x.amount))\n        let solidsDisplacement = solidsList.map(x => x.amount * volume * x.displacement).reduce((p, c) => p + c, 0)\n        let liquidsPercentageDisplacement = liquidsPercentage.map(x => (x.amount / 100) * volume).reduce((p, c) => p + c, 0)\n        let remainder = volume - (solidsDisplacement + liquidsPercentageDisplacement)\n\n        let id = 0\n\n        liquidsBalance.forEach(x => list.push(<li key={id++}>{x.name}: {(remainder / liquidsBalance.length).toPrecision(4)} {volumeUnits}</li>))\n        liquidsPercentage.forEach(x => list.push(<li key={id++}>{x.name}: {(volume * (x.amount / 100)).toPrecision(4)} {volumeUnits}</li>))\n        solidsList.forEach(x => list.push(<li key={id++}>{x.name}: {(volume * x.amount).toPrecision(4)} {massUnits}</li>))\n\n        return list\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>Recipe Calculator</h1>\n\n            <label htmlFor=\"volumeUnits\">Volume Units</label><br/>\n            <input onChange={(e) => setVolumeUnits(e.target.value)} defaultValue={volumeUnits} id=\"volumeUnits\" type=\"text\"/><br/>\n\n            <label htmlFor=\"massUnits\">Mass Units</label><br/>\n            <input onChange={(e) => setMassUnits(e.target.value)} defaultValue={massUnits} id=\"massUnits\" type=\"text\"/><br/>\n\n            <label htmlFor=\"total\">Total Volume ({volumeUnits})</label><br/>\n            <input onChange={(e) => setVolume(e.target.valueAsNumber)} defaultValue={volume || \"\"} id=\"total\" type=\"number\"/><br/>\n\n            <h2>Liquids</h2>\n            <h3>Liquids without amount specified will be used to fill remainder of total volume</h3>\n            <button onClick={addLiquid}>Add</button>\n            <ul>{liquidsList}</ul>\n\n            <h2>Solids</h2>\n            <button onClick={addSolid}>Add</button>\n            <ul>{solidsList}</ul>\n\n            <h2>Recipe</h2>\n            <ul>{recipeList()}</ul>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}